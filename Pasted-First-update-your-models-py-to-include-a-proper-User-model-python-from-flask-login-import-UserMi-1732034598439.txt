First, update your models.py to include a proper User model:
python
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from extensions import db

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    is_confirmed = db.Column(db.Boolean, default=False)
    confirmed_on = db.Column(db.DateTime)
    is_admin = db.Column(db.Boolean, default=False)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
        
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

Create an auth blueprint in routes/auth.py:
python
from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, login_required, current_user
from models import User, db
from forms import LoginForm, RegistrationForm
from datetime import datetime

auth = Blueprint('auth', __name__)

@auth.route('/signup', methods=['GET', 'POST'])
def signup():
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
        
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            flash('Email address already registered')
            return redirect(url_for('auth.signup'))
            
        user = User(
            username=form.username.data,
            email=form.email.data,
            is_confirmed=False
        )
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        
        flash('Registration successful! Please log in.')
        return redirect(url_for('auth.login'))
        
    return render_template('auth/signup.html', form=form)

@auth.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
        
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user)
            return redirect(url_for('main.index'))
        flash('Invalid email or password')
    return render_template('auth/login.html', form=form)

@auth.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('main.index'))

Create forms in forms.py:
python
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, Length, EqualTo

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=80)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Log In')

Create HTML templates in templates/auth/:
login.html:
xml
{% extends "base.html" %}
{% block content %}
<div class="auth-form">
    <h2>Login</h2>
    <form method="POST">
        {{ form.hidden_tag() }}
        <div>
            {{ form.email.label }}
            {{ form.email }}
        </div>
        <div>
            {{ form.password.label }}
            {{ form.password }}
        </div>
        {{ form.submit }}
    </form>
    <p>New user? <a href="{{ url_for('auth.signup') }}">Sign up here</a></p>
</div>
{% endblock %}

signup.html:
xml
{% extends "base.html" %}
{% block content %}
<div class="auth-form">
    <h2>Sign Up</h2>
    <form method="POST">
        {{ form.hidden_tag() }}
        <div>
            {{ form.username.label }}
            {{ form.username }}
        </div>
        <div>
            {{ form.email.label }}
            {{ form.email }}
        </div>
        <div>
            {{ form.password.label }}
            {{ form.password }}
        </div>
        <div>
            {{ form.confirm_password.label }}
            {{ form.confirm_password }}
        </div>
        {{ form.submit }}
    </form>
    <p>Already have an account? <a href="{{ url_for('auth.login') }}">Login here</a></p>
</div>
{% endblock %}

Update your app.py to include the authentication blueprint:
python
from flask import Flask
from flask_login import LoginManager
from extensions import db
from routes.auth import auth

def create_app():
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'your-secret-key'
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
    
    db.init_app(app)
    
    login_manager = LoginManager()
    login_manager.login_view = 'auth.login'
    login_manager.init_app(app)
    
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))
    
    app.register_blueprint(auth)
    
    with app.app_context():
        db.create_all()
    
    return app

app = create_app()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)

This implementation provides:
User registration with email and password
Login/logout functionality
Password hashing for security
Form validation
Flash messages for user feedback
Protected routes using @login_required
Database storage of user information
To use this in Replit:
Create the necessary files and folders
Install required packages in the Replit shell:
bash
pip install flask-login flask-wtf email-validator

Set up your environment variables in Replit's Secrets tab
Run the application
This provides a solid foundation for user authentication that you can build upon for your court reporter exam preparation application.